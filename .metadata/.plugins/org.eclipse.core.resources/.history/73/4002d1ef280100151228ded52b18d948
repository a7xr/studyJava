package StudyGraphic;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;

import javax.naming.SizeLimitExceededException;
import javax.swing.*;

public class FrameBibilavaTest01 extends JFrame implements KeyListener{

	PanelTesting01 panelTesting01 = new PanelTesting01();
	PointTesting pointTesting = new PointTesting(50, 50);
	ArrayList<PointTesting>arrayListPointTesting = new ArrayList<>();
	
	int[] sizePt = {10, 10};
	
	public FrameBibilavaTest01() {
		// TODO Auto-generated constructor stub
		setTitle("title");
		setBounds(10, 40, 500, 250);
//		setLayout(new FlowLayout());
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		panelTesting01.pt = pointTesting;
		panelTesting01.siize = sizePt;
		arrayListPointTesting.add(new PointTesting(50, 50));
		arrayListPointTesting.add(new PointTesting(40, 50));
		panelTesting01.arrayListPointTesting = this.arrayListPointTesting; 
		getContentPane().add(panelTesting01);
		addKeyListener(this);

		setVisible(true);
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		new FrameBibilavaTest01();
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		int a = e.getKeyCode();
		switch (a) {
		case KeyEvent.VK_UP:
//			pointTesting.y -= sizePt[1];
//			arrayListPointTesting.get(index)
			break;
		case KeyEvent.VK_DOWN:
//			pointTesting.y += sizePt[1];
			
			break;
		case KeyEvent.VK_RIGHT:
//			pointTesting.x += sizePt[0];
			
			break;
		case KeyEvent.VK_LEFT:
//			pointTesting.x -= sizePt[0];
			
			break;

		default:
			break;
		}
		panelTesting01.repaint();
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

}

class PanelTesting01 extends JPanel {
	
	PointTesting pt;
	int[] siize;
	ArrayList<PointTesting>arrayListPointTesting = new ArrayList<>();
	
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
//		g.fillOval(pt.x, pt.y, siize[0], siize[1]);

		for (int i = 0; i < arrayListPointTesting.size(); i++) {
			g.fillOval(arrayListPointTesting.get(i).x, 
					arrayListPointTesting.get(i).y, 
					siize[0], siize[1]);
		}
	}
	
}

class PointTesting {
	int x, y;
	
	public PointTesting(int x, int y) {
		super();
		this.x = x;
		this.y = y;
	}

	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}
	
}

class ToRm {
	int a, b;
}

class ToRm01 {
	ToRm01(){
		ToRm[] toRm = new ToRm[]{
			
		};
	}
}